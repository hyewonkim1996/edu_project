<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">
	
	<http auto-config="true" use-expressions="true">
	    <!-- 세션관리 -->
	    <session-management invalid-session-url="/">
	   		<!-- 동일 ID의 세션 최대 개수가 한개, 그 이상일 경우는 기존 세션 무효화 -->
	    	<concurrency-control max-sessions="1" error-if-maximum-exceeded="false" /> 
	    </session-management>
	    <!-- 특정 url 패턴에 해당하는 권한 부여를 위해서 -->
	    <intercept-url pattern="/admin**" access="hasRole('ROLE_ADMIN')" />
	    <intercept-url pattern="/edu_project/myPage**" access="hasAnyRole('ROLE_USER','ROLE_ADMIN')" />
	    <intercept-url pattern="/**" access="permitAll" />
	    <csrf disabled="true" />
	    <form-login
	    	username-parameter="m_id"
			password-parameter="m_pw" 
			login-processing-url="/login"
			login-page="/home"
			default-target-url="/login_success"
			authentication-failure-url="/login_fail"
			 />
			
			<!-- 
		username-parameter 클라이언트가 넘긴  아이디 name, 시큐리티 4에서는 username이라는 변수로 사용하고 있다. 
		login-processing-url 클라이언트의 로그인 요청 action, 컨트롤러 value가 아닌 스프링 시큐리티에서 로그인 처리하는 디폴트 url
		login-page 로그인 커스터마이징 페이지 컨트롤러 value.  만약 없으면 스프링시큐리티에서 제공하는 로그인 화면으로 감.
		default-target-url 로그인성공시 이동 경로 > 컨트롤러로 돌리고 거기서 세션처리를 해 준다.(*)
		authentication-failure-handler-ref="customAuthenticationFailureHandler"
		: authentication 실패시 원인 디버깅 위해 커스텀으로 failurehandler 구현함
			
			authentication-failure-url="/login?msg=fail"  <<참고로 로그인 실패시 이동 경로 >>
			authentication-failure-handler-ref="loginFailureHandler" 객체의 의존관계로 설정할수도 있고.   // https://to-dy.tistory.com/94
			default-target-url="/"  컨트롤로로 돌릴 수도 있다.  https://wildeveloperetrain.tistory.com/163
			
			Principal    extends     authentication  extends    securityContext   extends  SecutriyContextHolder  
			Credentials   
			Authorities
			
			접근 주체의 정보와 권한을 담는 Authentication-
			접근 주체의 인증 정보와 권한을 담는 인터페이스입니다. 
			스프링 시큐리티에서는 인증 시 id와 password를 이용한 credential 기반의 인증을 사용하며, 
			인증 후 최종 인증 결과를 담아 SecurityContext에 보관되고 필요할 때 전역적으로 참조가 가능합니다.
			
			
			Authentication 구조

			principal : 접근 주체의 아이디 혹은 User 객체를 저장합니다.
			credentials : 접근 주체의 비밀번호를 저장합니다.
			authorities : 인증된 접근 주체자의 권한 목록을 저장합니다.
			details : 인증에 대한 부가 정보를 저장합니다.
			authenticated : boolean 타입의 인증 여부를 저장합니다			
			
			
			
			클라이언트에서 login을 호출하고 이때 아이나 암호가 틀린 경우는 loin-page로 이동한다. --> 
			
	    
	    <remember-me key="remember-key" token-validity-seconds="604800" remember-me-parameter="remember-me-param"/>
	    <logout 
	    	logout-url="/logout" 
	    	logout-success-url="/logout_After" 
	    	invalidate-session="true" 
            delete-cookies="JSESSIONID,SPRING_SECURITY_REMEMBER_ME_COOKIE"/>
    </http>
    
    
    <!-- 인증 관련 아이디/암호 비교 설정 -->
    <authentication-manager>
    	<!-- 스프링 내장 인증 제공자, userDetails와 userDetailsService 인터페이스 이용-->
        <authentication-provider>
        	<jdbc-user-service
        		data-source-ref="dataSource"
        		users-by-username-query="SELECT m_id AS m_id, m_pw AS m_pw, enabled FROM member WHERE m_id = ?"
        		authorities-by-username-query="SELECT m_id AS m_id, levels AS levels FROM member WHERE m_id = ?"
        		/>
        		<!-- 스프링 시큐리티에서 검증시 사용할 비밀번호 암호화 인코더
        		스프링 시큐리티에서는 디비, 클라이언트 입력 비밀번호 모두 암호화를 꼭 거쳐야 검증이 가능함!
        		 -->
      <!-- 
				<security:password-encoder ref="passwordEncoder" />      
      -->
        		<password-encoder ref="bcryptPasswordEncoder" />
		</authentication-provider>
    </authentication-manager>
    
    <!-- 스프링 내장 BCryptPasswordEncoder 암호화 이용-->
 <!--   <bean id="passwordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>-->
 <!--  디비에서 암호화가 안되어 있으면 사용못함 -->
 <!-- 스프링 시큐리티에서 사용할 인코더 객체로 등록 
 -->
 	<beans:bean id="bcryptPasswordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>
	</beans:beans>